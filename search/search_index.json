{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf1f Bienvenue sur Mon Blog : My Journey to Web Development \u2013 Une Reconversion en Mode D\u00e9veloppeur ! \ud83c\udf1f","text":""},{"location":"#pourquoi-ce-blog","title":"\ud83d\ude80 Pourquoi ce Blog ?","text":"<p>Bonjour \u00e0 toutes et \u00e0 tous ! Je m\u2019appelle Yoann, j'ai 37 ans et je me lance dans une nouvelle aventure : devenir Concepteur D\u00e9veloppeur d\u2019Applications. Apr\u00e8s avoir pass\u00e9 plus d'une d\u00e9cennie \u00e0 explorer les myst\u00e8res du cancer et \u00e0 naviguer dans l\u2019univers de l\u2019industrie pharmaceutique, j\u2019ai d\u00e9cid\u00e9 de changer de cap pour me plonger dans un domaine qui m\u2019a toujours fascin\u00e9 et passion\u00e9 : le d\u00e9veloppement web et les nouvelles technologies.</p> <p>Ce blog, c\u2019est mon carnet de bord. Un espace o\u00f9 je vais partager mes d\u00e9couvertes, mes succ\u00e8s, mes difficult\u00e9s, et mes r\u00e9flexions sur cette transition professionnelle. Mon objectif ? Apprendre en partageant mon parcours. Ce sera l'occasion de montrer ma progression tout au long de ma formation aupr\u00e8s de mes futurs recruteurs, et peut-\u00eatre inspirer d\u2019autres reconversions.</p>"},{"location":"#la-formation-concepteur-dapplication-web-augmente-par-lia-chez-oclock","title":"\ud83c\udf93 La Formation : Concepteur D\u2019application web, augment\u00e9 par l\u2019IA - chez O\u2019Clock","text":"<p>Depuis le 15 septembre 2025, je suis immerg\u00e9 dans une formation intensive avec O\u2019Clock, une \u00e9cole qui forme aux m\u00e9tiers du num\u00e9rique. Cette formation intitul\u00e9e Concepteur D\u2019application web, augment\u00e9 par l\u2019IA, me pr\u00e9pare au Titre Professionnel de Concepteur D\u00e9veloppeur d'Applications (RNCP niveau 6). Au programme :</p> <ul> <li>HTML/CSS : Pour faire des sites qui ne ressemblent pas \u00e0 une page Word des ann\u00e9es 2000.</li> <li>JavaScript : Le langage qui donne vie aux sites web et qui permet de faire bien plus que des <code>console.log(\"Hello World\")</code>.</li> <li>React.js, Node.js, TypeScript : Parce que coder, c\u2019est bien, mais coder proprement et efficacement, c\u2019est mieux.</li> <li>Bases de donn\u00e9es et API : Pour manipuler des donn\u00e9es sans finir avec un fichier Excel nomm\u00e9 <code>final_final_v3_definitif.xlsx</code>.</li> <li>DevOps et Docker : Parce que d\u00e9ployer une application, c\u2019est un peu comme monter un meuble IKEA\u2026 mais avec moins de vis en trop (en th\u00e9orie).</li> <li>L\u2019IA comme copilote : Pour m\u2019aider \u00e0 coder plus vite, mais sans \u00e9teindre mon cerveau. Parce qu\u2019un d\u00e9veloppeur qui ne comprend pas son code, c\u2019est comme un chef qui suit une recette sans go\u00fbter : \u00e7a peut finir en catastrophe (ou en bug \u00e0 3h du matin).</li> </ul> <p>Et surtout, beaucoup de pratique ! Parce qu\u2019on ne devient pas d\u00e9veloppeur en regardant des tutos YouTube en mode passif. Ici, c\u2019est learning by doing : projets concrets, bugs \u00e0 d\u00e9boguer, et l\u2019art de recommencer jusqu\u2019\u00e0 ce que \u00e7a marche\u2026 ou presque.</p>"},{"location":"#dou-je-viens-de-la-science-au-code","title":"\ud83e\udde0 D\u2019o\u00f9 Je Viens : De la Science au Code","text":"<p>Mon parcours ? Plus de 10 ans en R&amp;D, entre la recherche sur le cancer et l\u2019industrie pharmaceutique. Un univers passionnant, mais o\u00f9 j\u2019ai ressenti le besoin de nouveaux d\u00e9fis et d\u2019un environnement plus dynamique. Le num\u00e9rique m\u2019a toujours attir\u00e9, et aujourd\u2019hui, je saute le pas pour en faire mon m\u00e9tier.</p> <p>Pourquoi le d\u00e9veloppement ? Parce que c\u2019est un domaine o\u00f9 la curiosit\u00e9, la logique et la cr\u00e9ativit\u00e9 se rencontrent. Je suis un \u00e9ternel apprenant. J'aime essayer, tester, d\u00e9couvrir de nouvelles choses et le monde du num\u00e9rique et des nouvelles technologies est parfait pour cela.</p>"},{"location":"#ce-que-vous-trouverez-ici","title":"\ud83d\udca1 Ce Que Vous Trouverez Ici","text":"<ul> <li>Mes apprentissages au jour le jour : Comptes-rendus des notions du jour apprises, de mes d\u00e9couvertes, explications de concepts, et exemples de code comment\u00e9s.</li> <li>Mes projets : Des petits exercices aux applications plus complexes.</li> <li>Des ressources utiles : Tutos, outils, et bonnes pratiques que je glane en chemin.</li> </ul>"},{"location":"#et-apres-a-la-recherche-dun-stage","title":"\ud83c\udfaf Et Apr\u00e8s ? \u00c0 la Recherche d\u2019un Stage !","text":"<p>Je suis \u00e0 la recherche d\u2019un stage de 2 mois minimum \u00e0 r\u00e9aliser \u00e0 partir d\u2019avril 2026 pour mettre en pratique tout ce que j\u2019aurai appris. Si vous connaissez une entreprise qui cherche un d\u00e9veloppeur motiv\u00e9, rigoureux et pr\u00eat \u00e0 apprendre, n\u2019h\u00e9sitez pas \u00e0 me contacter ! Je suis ouvert \u00e0 toutes les opportunit\u00e9s pour appliquer mes comp\u00e9tences dans un environnement professionnel.</p>"},{"location":"#pourquoi-me-suivre","title":"\ud83d\udce2 Pourquoi Me Suivre ?","text":"<ul> <li>Si vous \u00eates en reconversion ou que vous envisagez de vous lancer dans le d\u00e9veloppement, ce blog pourrait vous donner un aper\u00e7u r\u00e9aliste de ce qui vous attend.</li> <li>Si vous \u00eates d\u00e9j\u00e0 d\u00e9veloppeur, vos conseils et retours seront pr\u00e9cieux pour m\u2019aider \u00e0 progresser.</li> <li>Si vous aimez simplement les histoires de changements de carri\u00e8re et de d\u00e9fis personnels, vous \u00eates au bon endroit !</li> </ul>"},{"location":"#restons-en-contact","title":"\ud83d\udcac Restons en Contact !","text":"<p>N\u2019h\u00e9sitez pas \u00e0 partager, ou me contacter pour \u00e9changer. Vous pouvez me trouver sur :</p> <ul> <li>GitHub</li> <li>LinkedIn</li> </ul>"},{"location":"#pret-pour-le-decollage","title":"\ud83d\ude80 Pr\u00eat pour le D\u00e9collage ?","text":"<p>Alors, suivez-moi dans cette aventure, et voyons ensemble o\u00f9 ce nouveau chemin me m\u00e8nera. Spoiler : il y aura du code, des bugs, des \"Eur\u00eaka !\", et probablement quelques \"Mais POURQUOI \u00e7a ne marche pas ?!\".</p> <p>\u00c0 tr\u00e8s vite pour le premier chapitre : mes premiers pas en HTML/CSS ! \ud83d\udcbb\u2728</p> <p>\"Le code, c\u2019est comme la science : \u00e7a demande de la patience, de la pers\u00e9v\u00e9rance, et une bonne dose de caf\u00e9. Mais quand \u00e7a marche, c\u2019est magique.\" \ud83d\udd2c\ud83e\uddd1\u200d\ud83d\udcbb\ud83d\udca1 - Mistral AI \"Do or do not. There is no try.\" - Yoda \"The greatest teacher failure is.\" - Yoda</p>"},{"location":"blog/","title":"My Journey","text":""},{"location":"blog/#week-4","title":"Week 4","text":""},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/","title":"\ud83d\udcc5 SAISON A Semaine 5 \u00c9pisode 1 - Le DOM","text":""},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#notions-du-jour","title":"\ud83d\udcda Notions du jour","text":"<ul> <li>DOM (Document Object Model),</li> <li>Expliquer le principe du DOM,</li> <li>Acc\u00e9der \u00e0 un \u00e9l\u00e9ment de la page en JS (getElement(s)By, querySelector\u2026),</li> <li>Modifier un \u00e9l\u00e9ment de la page (objet HTMLElement),</li> <li>Cr\u00e9er un \u00e9l\u00e9ment,</li> <li>Ins\u00e9rer un \u00e9l\u00e9ment dans un autre,</li> <li>Utiliser la documentation pour connaitre les actions possibles avec un \u00e9l\u00e9ment.</li> </ul>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#le-dom-le-lien-magique-entre-html-et-javascript","title":"\ud83c\udf10 Le DOM : Le Lien Magique entre HTML et JavaScript","text":"<p>Aujourd\u2019hui, j\u2019ai plong\u00e9 dans l\u2019un des concepts les plus fondamentaux du d\u00e9veloppement web : le DOM, ou Document Object Model. En gros, le DOM est une repr\u00e9sentation en m\u00e9moire de la structure de votre page HTML, sous forme d\u2019un arbre d\u2019objets. Chaque balise HTML (un <code>&lt;div&gt;</code>, un <code>&lt;p&gt;</code>, etc.) devient un n\u0153ud dans cet arbre, et JavaScript peut interagir avec ces n\u0153uds pour modifier dynamiquement la page.</p> <p>Pourquoi c\u2019est puissant ? Sans le DOM, JavaScript ne pourrait pas r\u00e9agir aux actions de l\u2019utilisateur (clics, saisies\u2026) ni mettre \u00e0 jour le contenu sans recharger la page. C\u2019est la base des applications web dynamiques !</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#acceder-aux-elements-les-selecteurs-ces-cles-dacces","title":"\ud83d\udd0d Acc\u00e9der aux \u00c9l\u00e9ments : Les S\u00e9lecteurs, ces Cl\u00e9s d\u2019Acc\u00e8s","text":"<p>Pour manipuler un \u00e9l\u00e9ment, il faut d\u2019abord le cibler. JavaScript offre plusieurs m\u00e9thodes :</p> <ul> <li><code>getElementById()</code> : R\u00e9cup\u00e8re un \u00e9l\u00e9ment par son ID (unique).</li> </ul> <pre><code>const myTitle = document.getElementById(\"my-title\");\n</code></pre> <ul> <li><code>getElementsByClassName()</code> : R\u00e9cup\u00e8re une liste d\u2019\u00e9l\u00e9ments par leur classe.</li> <li><code>querySelector()</code> : Utilise des s\u00e9lecteurs CSS pour cibler un \u00e9l\u00e9ment (le premier trouv\u00e9).</li> </ul> <pre><code>const firstLink = document.querySelector(\"a\");\n</code></pre> <ul> <li><code>querySelectorAll()</code> : Comme <code>querySelector</code>, mais retourne tous les \u00e9l\u00e9ments correspondants.</li> </ul> <p>\ud83d\udca1 Astuce : <code>querySelector</code> est ultra-flexible et permet des s\u00e9lections complexes, comme <code>div &gt; p.highlight</code>.</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#modifier-un-element-lobjet-htmlelement","title":"\u2728 Modifier un \u00c9l\u00e9ment : L\u2019Objet HTMLElement","text":"<p>Une fois l\u2019\u00e9l\u00e9ment cibl\u00e9, on peut lire ou modifier ses propri\u00e9t\u00e9s et son contenu :</p> <ul> <li>Contenu texte : <code>element.textContent</code> ou <code>element.innerHTML</code> (attention, ce dernier interpr\u00e8te le HTML. Il peut ins\u00e9rer des balises <code>&lt;script&gt;</code> et ainsi laisser la porte ouverte pour une attaque XSS. Pr\u00e9f\u00e9rer l'utilisation de <code>element.innerText</code>).</li> <li>Attributs : <code>element.setAttribute(\"class\", \"class-name\")</code>, <code>element.classList(\"class-name\")</code>, <code>element.id = \"id-name\"</code>.</li> <li>Styles : <code>element.style.color = \"red\"</code>.</li> </ul> <p>Exemple :</p> <pre><code>const button = document.querySelector(\"button\");\nbouton.textContent = \"Click Me!\";\nbouton.style.backgroundColor = \"#4CAF50\";\n</code></pre>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#creer-et-inserer-des-elements-construire-la-page-dynamiquement","title":"\ud83d\udee0\ufe0f Cr\u00e9er et Ins\u00e9rer des \u00c9l\u00e9ments : Construire la Page Dynamiquement","text":"<p>JavaScript permet de cr\u00e9er des \u00e9l\u00e9ments et de les ajouter \u00e0 la page :</p> <ol> <li>Cr\u00e9er un \u00e9l\u00e9ment :</li> </ol> <pre><code>const newParagraph = document.createElement(\"p\");\nnewParagraph.textContent = \"Hello, world!\";\n</code></pre> <ol> <li> <p>L\u2019ins\u00e9rer dans le DOM :</p> </li> <li> <p><code>parent.appendChild(newParagraph)</code> : Ajoute l'\u00e9l\u00e9ment en tant qu'enfant de l'\u00e9l\u00e9ment parent cibl\u00e9.</p> </li> <li><code>parent.insertBefore(newParagraph, elementReference)</code> : Ins\u00e8re un n\u0153ud avant un n\u0153ud de r\u00e9f\u00e9rence en tant qu'enfant d'un n\u0153ud parent sp\u00e9cifi\u00e9.</li> </ol> <p>\ud83d\udca1 Cas pratique : Ajouter une liste d\u2019items g\u00e9n\u00e9r\u00e9e dynamiquement \u00e0 partir d\u2019un tableau JavaScript.</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#la-documentation-le-guide-ultime","title":"\ud83d\udcda La Documentation : Le Guide Ultime","text":"<p>Le DOM est vaste, et personne ne retient tout ! La documentation MDN est une mine d\u2019or :</p> <ul> <li>Elle liste toutes les propri\u00e9t\u00e9s et m\u00e9thodes disponibles pour chaque type d\u2019\u00e9l\u00e9ment.</li> <li>Exemples concrets et compatibilit\u00e9 navigateur.</li> </ul> <p>\ud83d\udca1 Conseil : Apprendre \u00e0 chercher efficacement dans la doc. Par exemple, taper \"MDN HTMLElement\" pour explorer les m\u00e9thodes d\u2019un \u00e9l\u00e9ment.</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#ce-que-je-retiens","title":"\ud83c\udfaf Ce Que Je Retiens","text":"<ul> <li>Le DOM est une interface entre HTML et JavaScript.</li> <li>Les s\u00e9lecteurs (<code>querySelector</code>, <code>getElementById</code>) sont essentiels pour cibler des \u00e9l\u00e9ments.</li> <li>On peut lire, modifier, cr\u00e9er, et supprimer des \u00e9l\u00e9ments dynamiquement.</li> <li>La documentation est indispensable pour d\u00e9couvrir les possibilit\u00e9s.</li> </ul> <p>Prochaine \u00e9tape : Explorer les \u00e9v\u00e9nements (<code>addEventListener</code>) pour rendre mes pages interactives !</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#challenge-du-jour","title":"\u2328\ufe0f Challenge du jour","text":""},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#dice-roller","title":"\ud83c\udfb2 Dice roller","text":""},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#but-du-challenge","title":"\ud83c\udfaf But du Challenge","text":"<p>Cr\u00e9er une application web interactive permettant de simuler le lancer de d\u00e9s \ud83c\udfb2\ud83c\udfb2 en JavaScript. L\u2019objectif est de g\u00e9n\u00e9rer visuellement un ou plusieurs d\u00e9s, dont la face est d\u00e9termin\u00e9e al\u00e9atoirement, et d\u2019afficher ces d\u00e9s dans l\u2019interface utilisateur. En bonus, le challenge propose d\u2019ajouter un adversaire (un deuxi\u00e8me joueur virtuel) pour comparer les lancers.</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#lien-avec-les-notions-du-jour","title":"\ud83d\udd17 Lien avec les Notions du Jour","text":"<p>Ce challenge met en pratique toutes les notions cl\u00e9s du DOM apprises aujourd\u2019hui :</p> <ul> <li>Cr\u00e9ation d\u2019\u00e9l\u00e9ments HTML (<code>div</code>) via JavaScript.</li> <li>Manipulation des classes et styles pour appliquer des styles CSS existants et afficher un sprite (image composite).</li> <li>Insertion d\u2019\u00e9l\u00e9ments dans le DOM pour afficher les d\u00e9s dans des zones sp\u00e9cifiques de la page.</li> <li>Modification dynamique des propri\u00e9t\u00e9s CSS (comme la position de l\u2019arri\u00e8re-plan) pour changer la face du d\u00e9.</li> <li>Interaction avec l\u2019utilisateur via <code>prompt</code> pour personnaliser le nombre de d\u00e9s lanc\u00e9s.</li> <li>Utilisation de la documentation pour comprendre comment manipuler les \u00e9l\u00e9ments et leurs propri\u00e9t\u00e9s (comme <code>background-position</code>).</li> </ul>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#etapes-a-realiser","title":"\ud83d\udccb \u00c9tapes \u00e0 R\u00e9aliser","text":"<ol> <li>Cr\u00e9ation d\u2019un D\u00e9 en JavaScript</li> <li>G\u00e9n\u00e9ration d\u2019un Nombre Al\u00e9atoire et Affichage de la Face du D\u00e9</li> <li>Lancer Plusieurs D\u00e9s</li> <li>Bonus : Ajouter un Adversaire</li> </ol>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#langage-de-programmation-utilise","title":"\ud83d\udcbb Langage de Programmation Utilis\u00e9","text":"<p>Le challenge est enti\u00e8rement r\u00e9alis\u00e9 en JavaScript, avec une interaction directe avec le DOM pour manipuler les \u00e9l\u00e9ments HTML et CSS. Le HTML et CSS sont fournis (ou peuvent \u00eatre g\u00e9n\u00e9r\u00e9s dynamiquement en JavaScript pour s\u2019entra\u00eener), mais la logique principale repose sur JavaScript. L'image stripe (contenant toutes les faces d'un d\u00e9, chaque face faisant <code>100px</code> de largeur) \u00e0 manipuler pour afficher les d\u00e9s est \u00e9galement fournie.</p>"},{"location":"blog/2025/10/13/-saison-a-semaine-5-%C3%A9pisode-1---le-dom/#ma-proposition-de-code-pour-ce-challenge","title":"\ud83e\uddd1\u200d\ud83d\udcbb Ma proposition de code pour ce challenge","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"../css/reset.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"../css/styles.css\"&gt;\n    &lt;title&gt;Roll&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;div class=\"board\" id=\"player\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script src=\"../js/app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> app.js<pre><code>// Get the main board element from the DOM by its id 'app'\nconst boardElt = document.getElementById(\"app\");\n// Create a new div element to represent the dealer's board and add an id and class to it\nconst dealerElt = document.createElement(\"div\");\ndealerElt.classList.add(\"board\");\ndealerElt.id = \"dealer\";\n// Append the dealer's board to the main board\nboardElt.appendChild(dealerElt);\n\n/**\n * Generates a dice for the specified player and appends it to the player's board.\n * The dice face is determined randomly between 1 and 6.\n * @param {string} player - The id of the player ('player' or 'dealer') to whom the dice will be added.\n */\nfunction generateDice(player) {\n  // Generate a random number between 1 and 6 to represent the dice value\n  const diceValue = (Math.floor(Math.random() * 6) + 1);\n  // Log the dice value to the console for debugging and check if the diceValue corresponds to the correct dice face displayed\n  console.log(diceValue);\n  // Create a new div element to represent the dice\n  const diceElt = document.createElement(\"div\");\n  diceElt.classList.add(\"dice\");\n  // Get the player's board element by its id\n  const playerElt = document.getElementById(player);\n  // Append the dice element to the player's board\n  playerElt.appendChild(diceElt);\n\n  // Set the background position based on X axis to display the correct dice face using a sprite\n  diceElt.style.backgroundPositionX = `${(-100 * diceValue) + 100}px`;\n}\n\n// Ask the user how many dice they want to roll and convert the input to a number\nconst playerInput = Number(prompt(\"Combien de d\u00e9s souhaitez-vous lancer ?\"));\n\n// Loop to generate the specified number of dice for both the player and the dealer\nfor (let dice = 1; dice &lt;= playerInput; dice++) {\n  generateDice(\"player\");\n  generateDice(\"dealer\");\n}\n</code></pre> R\u00e9sultat attendu."},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/","title":"\ud83d\udcc5 SAISON A Semaine 5 \u00c9pisode 2 - Les \u00c9v\u00e8nements","text":""},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#notions-du-jour","title":"\ud83d\udcda Notions du jour","text":"<p>\u00c9couteurs d\u2019\u00e9v\u00e9nement :</p> <ul> <li><code>addEventListener</code></li> <li>le param\u00e8tre <code>event</code></li> </ul>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#addeventlistener-le-pont-entre-lutilisateur-et-le-code","title":"\ud83c\udfaf <code>addEventListener</code> : Le Pont entre l\u2019Utilisateur et le Code","text":"<p>Aujourd\u2019hui, j\u2019ai d\u00e9couvert la gestion des \u00e9v\u00e9nements avec <code>addEventListener</code>. Cette m\u00e9thode permet d\u2019\u00e9couter les actions de l\u2019utilisateur (clics, saisies, survols\u2026) et d\u2019y r\u00e9pondre en temps r\u00e9el. En gros, c\u2019est ce qui transforme une page statique en une exp\u00e9rience interactive !</p>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#exemple-ecouter-un-clic-sur-un-bouton","title":"Exemple : \u00c9couter un clic sur un bouton","text":"<pre><code>// Select a button from the DOM\nconst submitButton = document.querySelector(\"#submit-button\");\n\n// Add an event Listener for 'click' event\nsubmitButton.addEventListener(\"click\", () =&gt; {\n  console.log(\"Button clicked!\");\n  // Here, we could modify the DOM, send a request, etc.\n});\n</code></pre> <p>Sans <code>addEventListener</code>, impossible de r\u00e9agir \u00e0 un clic sur un bouton, de valider un formulaire, ou de d\u00e9clencher une animation.</p>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#le-parametre-event-tout-savoir-sur-laction-de-lutilisateur","title":"\ud83d\udd0d Le Param\u00e8tre <code>event</code> : Tout Savoir sur l\u2019Action de l\u2019Utilisateur","text":"<p>Quand un \u00e9v\u00e9nement se produit, JavaScript transmet un objet <code>event</code> \u00e0 la fonction de rappel (callback). Cet objet est une mine d\u2019informations :</p> <ul> <li>Quel \u00e9l\u00e9ment a d\u00e9clench\u00e9 l\u2019\u00e9v\u00e9nement ? (<code>event.target</code>)</li> <li>Quelle touche du clavier a \u00e9t\u00e9 press\u00e9e ? (<code>event.key</code>)</li> <li>Quelles sont les coordonn\u00e9es de la souris ? (<code>event.clientX</code>, <code>event.clientY</code>)</li> <li>L\u2019\u00e9v\u00e9nement a-t-il \u00e9t\u00e9 annul\u00e9 par d\u00e9faut ? (<code>event.preventDefault()</code>)</li> </ul>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#exemple-1-recuperer-la-cible-dun-clic","title":"Exemple 1 : R\u00e9cup\u00e9rer la cible d\u2019un clic","text":"<pre><code>const myButton = document.querySelector(\"#my-button\");\n\nmyButton.addEventListener(\"click\", (event) =&gt; {\n  // `event.target` returns the element that triggered the event\n  console.log(\"\u00c9l\u00e9ment cliqu\u00e9 :\", event.target);\n  event.target.style.backgroundColor = \"lightblue\"; // Change the background color\n});\n</code></pre>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#exemple-2-empecher-le-comportement-par-defaut-dun-formulaire","title":"Exemple 2 : Emp\u00eacher le comportement par d\u00e9faut d\u2019un formulaire","text":"<pre><code>// Select the form from the DOM\nconst userForm = document.querySelector(\"#user-form\");\n\n// Add an event listener for the 'submit' event\nuserForm.addEventListener(\"submit\", (event) =&gt; {\n  // Prevent the default form submission behavior\n  event.preventDefault();\n\n  // Get the input values\n  const nameInput = document.querySelector(\"#name-input\").value;\n  const emailInput = document.querySelector(\"#email-input\").value;\n\n  // Validate the inputs (example: check if they are not empty)\n  if (!nameInput || !emailInput) {\n    console.log(\"Please fill in all fields!\");\n  } else {\n    // If validation passes, proceed with custom logic (e.g., send data to a server)\n    console.log(\"Form submitted successfully!\");\n    console.log(\"Name:\", nameInput);\n    console.log(\"Email:\", emailInput);\n\n    // Optionally, reset the form after submission\n    userForm.reset();\n  }\n});\n</code></pre>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#exemple-3-recuperer-la-touche-pressee-sur-le-clavier","title":"Exemple 3 : R\u00e9cup\u00e9rer la touche press\u00e9e sur le clavier","text":"<pre><code>document.addEventListener(\"keydown\", (event) =&gt; {\n  // Display the striked key\n  console.log(\"Touche press\u00e9e :\", event.key);\n});\n</code></pre>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#la-documentation-le-gps-du-developpeur","title":"\ud83d\udcda La Documentation : Le GPS du D\u00e9veloppeur","text":"<p>Avec <code>addEventListener</code>, il y a beaucoup de possibilit\u00e9s mais comment savoir quels \u00e9v\u00e9nements \u00e9couter ? La documentation MDN (MDN) est l\u00e0 pour \u00e7a :</p> <ul> <li>Elle liste tous les \u00e9v\u00e9nements disponibles (<code>click</code>, <code>submit</code>, <code>keydown</code>, <code>mouseover</code>\u2026).</li> <li>Elle explique les propri\u00e9t\u00e9s de l\u2019objet <code>event</code> pour chaque type d\u2019\u00e9v\u00e9nement.</li> <li>Elle donne des exemples concrets pour chaque cas d\u2019usage.</li> </ul>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#ce-que-jai-appris-a-faire-aujourdhui","title":"\ud83d\udee0\ufe0f Ce Que J\u2019ai Appris \u00e0 Faire Aujourd\u2019hui","text":"<ol> <li>\u00c9couter un clic sur un bouton et afficher un message.</li> <li>R\u00e9agir \u00e0 une saisie clavier pour d\u00e9placer un objet dans un jeux par exemple.</li> <li>Emp\u00eacher le comportement par d\u00e9faut d\u2019un lien ou d\u2019un formulaire avec <code>event.preventDefault()</code>.</li> <li>Combiner plusieurs \u00e9v\u00e9nements pour cr\u00e9er des interactions complexes (ex: un menu qui s\u2019ouvre au survol et au clic).</li> </ol>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#challenge-du-jour","title":"\u2328\ufe0f Challenge du jour","text":"<p>Pas de challenge aujourd'hui. C'est l'occasion de r\u00e9viser, faire de la veille et s'exercer en autonomie.</p>"},{"location":"blog/2025/10/14/-saison-a-semaine-5-%C3%A9pisode-2---les-%C3%A9v%C3%A8nements/#prochaine-etape","title":"\ud83d\ude80 Prochaine \u00c9tape","text":"<p>Demain, c'est journ\u00e9e en pair-programming avec un coll\u00e8gue de promo o\u00f9 nous allons combiner les \u00e9v\u00e9nements avec les manipulations du DOM pour cr\u00e9er une mini-application interactive, comme un jeu ou un quiz. Ce sera l'occasion de s'exercer et de partager nos fa\u00e7on de faire pour r\u00e9aliser ce challenge.</p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/","title":"\ud83d\udcc5 SAISON A Semaine 5 \u00c9pisode 3 - Une Journ\u00e9e en Pair-Programming","text":""},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#notions-du-jour","title":"\ud83d\udcda Notions du jour","text":"<p>Aujourd\u2019hui, j\u2019ai particip\u00e9 \u00e0 un atelier en pair-programming avec pour objectif de cr\u00e9er une application web d\u2019ardoise pixel art, inspir\u00e9e du style r\u00e9tro de Space Invaders. Le d\u00e9fi ? Tout g\u00e9n\u00e9rer en JavaScript : la grille de pixels, le formulaire de configuration, et m\u00eame la palette de couleurs. Nous avions seulement une maquette comme point de d\u00e9part. Pas de code fourni, juste une id\u00e9e \u00e0 concr\u00e9tiser !</p> <p>Mise \u00e0 jour le 16 octobre 2025</p> <p>Cet article a \u00e9t\u00e9 mis \u00e0 jour pour inclure une am\u00e9lioration du code permettant de corriger les probl\u00e8mes rencontr\u00e9s \u00e9nonc\u00e9s dans la section \ud83c\udfa8 Am\u00e9liorations et D\u00e9fis. Ajout de la section suivante : \ud83d\udcaa Suite et fin !</p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#etape-preparatoire-decouper-la-maquette","title":"\ud83d\udcd0 \u00c9tape Pr\u00e9paratoire : D\u00e9couper la Maquette","text":"<p>Le matin, nous avons commenc\u00e9 par analyser la maquette pour identifier les \u00e9l\u00e9ments cl\u00e9s :</p> <ol> <li>Un <code>&lt;header&gt;</code> contenant un formulaire avec :</li> <li>Un input pour d\u00e9finir la taille de la grille (en nombre de pixels).</li> <li>Un input pour d\u00e9finir la taille des pixels (en pixels).</li> <li>Un bouton pour valider et g\u00e9n\u00e9rer la grille.</li> <li>Un <code>&lt;main&gt;</code> contenant :</li> <li>La grille de pixels (notre ardoise).</li> <li>Une palette de couleurs en bas, pour choisir la couleur des pixels.</li> </ol> <p>Action : Nous avons cr\u00e9\u00e9 une structure HTML basique et ajout\u00e9 un peu de CSS pour styliser les \u00e9l\u00e9ments (couleurs, tailles, etc.). L\u2019id\u00e9e \u00e9tait de pr\u00e9parer le terrain pour que JavaScript puisse prendre le relais. Nous sommes partis d'une grille de d\u00e9part compos\u00e9e de 8 x 8 pixels (chaque pixel faisant une taille de <code>50px</code>) cod\u00e9e en dur dans le HTML pour pr\u00e9visualiser le rendu attendu.</p> invader.html - Body content<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;form action=\"\"&gt;\n      &lt;input type=\"number\" min=\"\" max=\"\" step=\"1\" placeholder=\"Taille de la grille\"&gt;\n      &lt;input type=\"number\" min=\"\" max=\"\" step=\"1\" placeholder=\"Taille des pixels\"&gt;\n      &lt;button type=\"submit\"&gt;Valider&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;div id=\"grid\"&gt;\n      &lt;!-- Simulate a 8x8 grid --&gt;\n      &lt;div class=\"pixel\"&gt;&lt;/div&gt;\n      &lt;!-- &lt;div class=\"pixel\"&gt;&lt;/div&gt; \n           &lt;div class=\"pixel\"&gt;&lt;/div&gt;\n           &lt;div class=\"pixel\"&gt;&lt;/div&gt;\n           ...\n           &lt;div class=\"pixel\"&gt;&lt;/div&gt;--&gt;\n      &lt;div class=\"pixel\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"palette\"&gt;&lt;/div&gt;\n  &lt;/main&gt;\n  &lt;script src=\"../js/app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> style.css - base CSS<pre><code>:root {\n    --pixel-color-grey-light: #D2DAE2;\n    --pixel-border-grey-light: #808E9B;\n    --pixel-color-grey-dark: #485460;\n    --pixel-border-grey-dark: #1D262D;\n    --bg-color-main: #665ACE;\n    --bg-color-header: #3148AD;\n}\n\nheader {\n    background-color: var(--bg-color-header);\n    height: 20dvh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nmain {\n    background-color: var(--bg-color-main);\n    height: 80dvh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#grid {\n    display: grid;\n    grid-template-rows: auto;\n    width: auto;\n    height: auto;\n}\n\n.pixel {\n    background-color: var(--pixel-color-grey-light);\n    border: 2px solid var(--pixel-border-grey-light);\n    height: 50px;\n    width: 50px;\n}\n</code></pre>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#creation-de-lapplication-avec-javascript","title":"\ud83d\udcbb Cr\u00e9ation de l\u2019Application avec JavaScript","text":""},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#1-generer-la-grille-de-pixels","title":"1\ufe0f\u20e3 G\u00e9n\u00e9rer la Grille de Pixels","text":"<p>Objectif : G\u00e9n\u00e9rer une grille dynamique en fonction de la taille choisie par l\u2019utilisateur.</p> <p>Premi\u00e8re approche : Avant de nous attaquer \u00e0 la gestion du formulaire, nous avons commenc\u00e9 avec un <code>prompt()</code> pour demander la taille de la grille, en fixant la taille des pixels \u00e0 <code>50px</code> pour les tests.</p> app.js - Grid generation<pre><code>// Get #grid Element\nconst grid = document.getElementById(\"grid\");\n// Initial test with a prompt\nconst userInput = Number(prompt(\"Taille de la grille ?\"));\n\n// Use the grid-template-columns CSS property to create the grid\ngrid.style.gridTemplateColumns = `repeat(${userInput}, 1fr)`;\n// Generate the grid\nfor (let round = 0; round &lt; userInput * userInput; round++) {\n  const pixel = document.createElement(\"div\"); // Create a pixel element\n  pixel.classList.add(\"pixel\"); // Add .pixel class to the pixel element\n  grid.appendChild(pixel); // Append pixel element into #grid element\n}\n</code></pre> R\u00e9sultat : Une grille de pixels gris clair, pr\u00eate \u00e0 \u00eatre color\u00e9e ! <p></p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#2-rendre-les-pixels-cliquables","title":"2\ufe0f\u20e3 Rendre les Pixels Cliquables","text":"<p>Objectif : Changer la couleur d\u2019un pixel au clic (noir par d\u00e9faut).</p> <p>Solution : Nous avons pens\u00e9 \u00e0 cr\u00e9er une classe <code>dark</code> afin de l'ajouter \u00e0 un pixel lorsque celui-ci est cliqu\u00e9. Si un pixel poss\u00e8de la classe <code>dark</code>, alors il prend la couleur noir. En cherchant dans la documentation, nous avons trouver que nous pouvions utiliser un <code>addEventListener</code> avec la m\u00e9thode <code>toggle()</code> de l'objet <code>classList</code>d'un HTML DOM element pour basculer entre les classes CSS.</p> app.js - Toggling pixel color<pre><code>// ...\n\n// Generate the grid with toggle event on pixels\nfor (let round = 0; round &lt; userInput * userInput; round++) {\n  const pixel = document.createElement(\"div\"); // Create a pixel element\n  pixel.classList.add(\"pixel\"); // Add .pixel class to the pixel element\n  // Add \"click\" event Listener with classList.toggle() method on pixels\n  pixel.addEventListener(\"click\", () =&gt; {\n    pixel.classList.toggle(\"dark\");\n  });\n  grid.appendChild(pixel); // Append pixel element into #grid element\n}\n</code></pre> <p>CSS associ\u00e9 :</p> style.css - Add .dark class<pre><code>.dark {\n    background-color: var(--pixel-color-grey-dark); /* Corresponding to #485460 */\n    border: 2px solid var(--pixel-border-grey-dark); /* Corresponding to #1D262D */\n}\n</code></pre> R\u00e9sultat : Une grille interactive o\u00f9 chaque clic inverse la couleur du pixel ! <p></p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#3-integrer-le-formulaire","title":"3\ufe0f\u20e3 Int\u00e9grer le Formulaire","text":"<p>Objectif : Remplacer le <code>prompt()</code> par un formulaire HTML pour configurer la grille.</p> <p>\u00c9tapes :</p> <ol> <li>R\u00e9cup\u00e9rer les valeurs des inputs (taille de la grille et taille des pixels).</li> <li>G\u00e9n\u00e9rer la grille en fonction de ces valeurs.</li> </ol> app.js - Generate new grid with the form<pre><code>// Get #grid Element\nconst grid = document.getElementById(\"grid\");\n\n// Get the form elements\nconst form = document.querySelector(\"form\");  // Get the form\nconst gridSizeInput = document.querySelector(\".grid-size\"); // Get input for grid size\nconst pixelSizeInput = document.querySelector(\".pixel-size\"); // Get input for pixel size\n\n// Add event listener to the form to get inputs values to generate a new grid once submited\nform.addEventListener(\"submit\", (event) =&gt; {\n  // Prevent default form behaviour\n  event.preventDefault();\n  // Reset the grid\n  const pixelsToRemove = document.querySelectorAll('.pixel'); // Get all pixels from the grid\n  // Remove pixels\n  for (const pixel of pixelsToRemove) {\n    pixel.remove();\n  }\n\n  // Update the grid generation with form inputs values\n  const gridSizeInputValue = gridSizeInput.value; // Get grid size input value\n  const pixelSizeInputValue = pixelSizeInput.value; // Get pixel size input value\n\n  grid.style.gridTemplateColumns = `repeat(${gridSizeInputValue}, 1fr)`;\n\n  for (let round = 0; round &lt; Math.pow(gridSizeInputValue, 2); round++) {\n    const pixel = document.createElement(\"div\"); // Create a pixel element\n    pixel.classList.add(\"pixel\"); // Add .pixel class to the pixel element\n    // Add \"click\" event Listener with classList.toggle() method on pixels\n    pixel.addEventListener(\"click\", () =&gt; {\n      pixel.classList.toggle(\"dark\");\n    });\n    grid.appendChild(pixel); // Append pixel element into #grid element\n  }\n  form.reset(); // Reset form inputs\n});\n</code></pre> R\u00e9sultat : Un formulaire fonctionnel qui g\u00e9n\u00e8re une grille personnalis\u00e9e ! <p></p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#4-partie-bonus-creer-la-palette-de-couleurs","title":"4\ufe0f\u20e3 Partie Bonus : Cr\u00e9er la Palette de Couleurs","text":"<p>Objectif : Ajouter une palette de couleurs pour modifier la couleur des pixels.</p> <p>\u00c9tapes :</p> <ol> <li>Cr\u00e9er la palette (une <code>&lt;div&gt;</code> par couleur).</li> <li>Permettre \u00e0 l\u2019utilisateur de s\u00e9lectionner une couleur.</li> <li>Appliquer la couleur s\u00e9lectionn\u00e9e aux pixels cliqu\u00e9s.</li> </ol> <p>Ajout de la palette dans le fichier html :</p> invader.html - Palette<pre><code>&lt;!-- Add a &lt;div&gt; containing the different colors into the &lt;main&gt; section --&gt;\n&lt;div class=\"palette\"&gt;\n  &lt;!-- Add a &lt;div&gt; by color --&gt;\n  &lt;div class=\"grey\"&gt;&lt;/div&gt; \n  &lt;div class=\"dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"orange\"&gt;&lt;/div&gt;\n  &lt;div class=\"green\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>CSS pour la palette :</p> style.css<pre><code>.grey {\n    background-color: var(--pixel-color-grey-light);\n    border: 2px solid var(--pixel-border-grey-light);\n}\n\n.dark {\n    background-color: var(--pixel-color-grey-dark);\n    border: 2px solid var(--pixel-border-grey-dark);\n}\n\n.green {\n    background-color: var(--pixel-color-green);\n    border: 2px solid var(--pixel-border-green);\n}\n\n.orange {\n    background-color: var(--pixel-color-orange);\n    border: 2px solid var(--pixel-border-orange);\n}\n\n.palette {\n    background-color: #4A45A3;\n    padding: 2rem;\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    justify-content: space-between;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n}\n\n.palette &gt; * {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    border-width: 4px;\n\n}\n\n/* If a color is clicked, this class will be added to change the color size\nand to specify that the color is selected */\n.color-selected {\n    width: 80px;\n    height: 80px; \n}\n</code></pre> Rendu avec la palette <p></p> <p>Il faut maintenant pouvoir s\u00e9lectionner les couleurs sur la Palette et les lier aux Pixels.</p> <p>Solution partielle trouv\u00e9e : En cherchant dans la documentation, nous avons utilis\u00e9 <code>classList.item()</code> pour r\u00e9cup\u00e9rer la classe de la couleur s\u00e9lectionn\u00e9e et l\u2019appliquer aux pixels.</p> app.js - Palette handling<pre><code>// ...\n\n/**\n * Update \"click\" event in the grid generation part\n * By Handling \"click\" event to change pixel color\n */\npixel.addEventListener(\"click\", () =&gt; {\n  // Get the selected color from palette\n  const selectedColor = document.querySelector(\".color-selected\").classList.item(0);\n  // Get current color of the pixel\n  const currentPixelColor = pixel.classList.item(1);\n  // Replace current color with selected color\n  pixel.classList.replace(currentPixelColor, selectedColor);\n});\n\n// ...\n\n// Get all color elements from the palette\nconst paletteColors = document.querySelectorAll(\".palette &gt; *\");\n\n// Handles click event to select a color from the palette\nfor (const color of paletteColors) {\n  color.addEventListener(\"click\", () =&gt; {\n    // Toggle 'color-selected' on the clicked color\n    color.classList.toggle(\"color-selected\");\n  });\n}\n</code></pre> R\u00e9sultat final obtenu : Les pixels prennent la couleur s\u00e9lectionn\u00e9e dans la palette ! <p></p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#ameliorations-et-defis","title":"\ud83c\udfa8 Am\u00e9liorations et D\u00e9fis","text":"<p>Probl\u00e8me rencontr\u00e9 : La solution propos\u00e9e reste \u00e0 optimiser. En effet, lorsque l'on clique sur une couleur pour la s\u00e9lectionner il faudrait que celle-ci devienne s\u00e9lectionn\u00e9e et que toutes les autres couleurs ne soient plus s\u00e9lectionn\u00e9es. Le comportement actuel est que lorsqu'on clique sur une couleur, les autres couleurs restent s\u00e9lectionn\u00e9es si elles ont d\u00e9j\u00e0 \u00e9t\u00e9 s\u00e9lectionn\u00e9es avant. Ce qui fait que l'on peut s\u00e9lectionner toutes les couleurs en m\u00eame temps. Il faut cliquer \u00e0 nouveau sur une couleur d\u00e9j\u00e0 s\u00e9lectionn\u00e9e pour la d\u00e9-s\u00e9lectionner gr\u00e2ce \u00e0 <code>toggle()</code>. En l'\u00e9tat pour pouvoir changer la couleur des pixels il faut s\u00e9lectionner une seule couleur et d\u00e9-s\u00e9lectionner manuellement les autres couleurs afin de n'avoir qu'une seule couleur s\u00e9lectionn\u00e9e dans la palette. Ensuite on peut cliquer sur les pixels afin de changer leur couleur.</p>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#ce-que-jai-appris-aujourdhui","title":"\ud83d\udca1 Ce Que J\u2019ai Appris Aujourd\u2019hui","text":"<ul> <li>Le pair programming est puissant : Travailler \u00e0 deux permet de r\u00e9soudre des probl\u00e8mes plus rapidement et d\u2019apprendre des approches diff\u00e9rentes.</li> <li>La documentation est une alli\u00e9e : Sans elle, nous n\u2019aurions pas trouv\u00e9 <code>classList.toggle()</code> ou <code>classList.item()</code>.</li> <li>Les petites victoires comptent : Chaque \u00e9tape franchie (m\u00eame minuscule) est une avanc\u00e9e !</li> <li>L\u2019importance des tests : Tester chaque fonctionnalit\u00e9 au fur et \u00e0 mesure \u00e9vite les bugs cumulatifs.</li> </ul>"},{"location":"blog/2025/10/15/-saison-a-semaine-5-%C3%A9pisode-3---une-journ%C3%A9e-en-pair-programming/#suite-et-fin","title":"\ud83d\udcaa Suite et fin !","text":"<p>Ce paragraphe a \u00e9t\u00e9 ajout\u00e9 lors de la mise \u00e0 jour du 16 octobre 2025.</p> <p>Apr\u00e8s une bonne nuit de sommeil \ud83d\udecc\ud83d\udca4 \u00e0 r\u00eaver de grilles, de pixels et de lignes de code. Je me r\u00e9veille \ud83d\ude34 en pensant avoir trouv\u00e9 comment ne s\u00e9lectionner qu'une seule couleur sur la palette sans les s\u00e9lectionner toutes en m\u00eame temps. Pour cela je me suis dit que lorsque je s\u00e9lectionne une couleur sur la palette, il faut que d\u00e9-s\u00e9lectionne toutes les couleurs de la palette qui sont s\u00e9lectionn\u00e9es d'abord (c'est-\u00e0-dire qu'elles poss\u00e8dent la classe <code>color-selected</code>).</p> <p>Voici ma solution :</p> app.js - Select only one color from the palette<pre><code>/**\n * Handles click event to select a color from the palette\n */\nfor (const color of paletteColors) {\n  color.addEventListener(\"click\", () =&gt; {\n    // If the color is not already selected\n    if (!color.classList.contains(\"color-selected\")) {\n      // Remove 'color-selected' from all colors\n      for (const color of paletteColors) {\n        if (color.classList.contains(\"color-selected\")) {\n          color.classList.toggle(\"color-selected\");\n        }\n      }\n    }\n    // Toggle 'color-selected' on the clicked color\n    color.classList.toggle(\"color-selected\");\n  });\n}\n</code></pre> R\u00e9sultat final obtenu : Les pixels prennent la couleur s\u00e9lectionn\u00e9e dans la palette ! <p></p>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}